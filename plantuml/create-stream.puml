@startuml create-environment
actor vro_user order 0
participant vro order 10
participant vcenter order 15
participant vra order 20
participant ad_mgmt order 25
participant nsx order 30
participant octopus order 40
database sql_ipam order 50

vro_user -> vro : run create-environment
    note left: parameters:\n pTargetEnvironment,\n pBusinessGroupDesc,\n pBusinessGroupManagers,\n pBusinessGroupManagerGroup,\n pTargetDeliveryStream,\n pBusinessGroupSupportUsers,\n pBusinessGroupSupportUserGroups,\n pTargetDeliveryStreamProject
    activate vro
    group create-streamskeleton
    vro -> vcenter: create stream folder
        activate vcenter
    vro <- vcenter: folder created
    deactivate vcenter
    |||

    vro -> ad_mgmt: create AD objects
        activate ad_mgmt
        ad_mgmt -> ad_mgmt: create stream OU
        ad_mgmt -> ad_mgmt: create OUs inside stream OU
        note right: computers, groups and service accounts OUs
        ad_mgmt -> ad_mgmt: create groups inside groups OU
        note right: create groups for managers, support users and users
        ad_mgmt -> ad_mgmt: populate manager group
        note right: add users/groups to manager group
        ad_mgmt -> ad_mgmt: populate support users group
        note right: add users/groups to support users group
        ad_mgmt -> ad_mgmt: add vRA IaaS service account to managers group
    vro <- ad_mgmt: AD objects created
    deactivate ad_mgmt
    |||
    
    vro -> vra: synchronise vRA directory
        note right: brings vRA up-to-date with new AD objects
        activate vra
        ...wait for sync to complete...
vro <- vra:
    deactivate vra
    |||

    vro -> vra: create business group
        activate vra
    vro <- vra:
    deactivate vra

    vro -> vra: create reservation
        note right: create vanilla reservation using template (made specific for the business group)
        activate vra
    vro <- vra:
    deactivate vra

    vro -> vra: create entitlement
        note right: entitlement associated with business group and default services, catalog items, resource actions and resource extensions
        activate vra
    vro <- vra: 
    deactivate vra
    |||
    end
    |||
    
    group clone-octopustenant
    vro -> octopus: clone octopus tenant
    note right: create tenant for new stream based on template with all projects connected to all envrionments
    activate octopus
        octopus -> vro: tenant created
    deactivate octopus
    |||
    end
    |||

    group create-networking
    vro -> nsx: create nsx network objects
        activate nsx
        nsx -> nsx: create vxlan for transit network
            note right: logical switch used to connect stream ESG to logical router
        nsx -> nsx: create stream edge
            note right: based on template XML with runtime values inserted into placeholders, e.g. uplink and internal interfaces
        nsx -> nsx: add BGP neighbours
            note right: add BGP configuration to perimeter and stream edge
        nsx -> nsx: add NAT rules to perimeter edge
            note right: this is now now deprecated - we used to use NAT rules to allow RDP connections from workstations into the stream VMs. We now have global name resolution and direct connectivity to allow this
        nsx -> nsx: create nsx logical router
            note right: based on template XML with runtime values inserted into placeholders
        nsx -> nsx: create stream network
            note right: logical switch connecting logical router to in-stream infrastrucure and endpoints (VMs, LBs, SQL listeners)
    vro <- nsx: network objects created
    deactivate nsx
    
    vro -> vra: configure vRA based on new NSX objects
        activate vra
        vra -> vra: invoke vRA data collection
            note right: bring vRA up-to-date with new NSX objects
            ...wait for data collection to complete...
        vra -> vra: create network profile
        vra -> vra: update reservation with networking information
            note right: update reservation created earlier, associating network path (linking new stream network to new network profile)
    vro <- vra: vRA configured based on new NSX objects
    deactivate vra
    |||
    end
    |||

    group create-sqlstreamandnetworkprofile
    vro -> sql_ipam: add new stream information to sql ipam db
        activate sql_ipam
        note right: rows in db created representing new stream and network profile - this allows ip allocations to be recorded against the stream when VMs, VIPs or SQL listeners are created
    vro <- sql_ipam
    deactivate sql_ipam
    |||
    end
    |||

    group create-streamnsxsecuritytagandgroups
    vro -> nsx: create NSX security tag and groups for DFW
        activate nsx
        nsx -> nsx: create security tag for stream
            note right: e.g. ST-LOCATION-1011
        nsx -> nsx: create security group for everything in the stream
            note right: e.g. SG-LOCATION-1011
        nsx -> nsx: create security group for everything NOT in the  stream
            note right: e.g. SG-LOCATION-Not_1011
        
        nsx -> nsx: create DFW section and rule for stream
            note right: e.g. rule blocks anything from ST-LOCATION-1011 to ST-LOCATION_Not_1011
    vro <- nsx: NSX DFW objects created
    deactivate nsx
    |||
    end
    |||

    group add-nsxdistributedfirewallrule
    vro -> nsx: create NSX security tag and groups for DFW
        activate nsx
        nsx -> nsx: create security tag for stream
            note right: e.g. ST-LOCATION-1011
    deactivate nsx
    |||
    end
    |||

    group provision-blueprint
    vro -> vra: provisions jumpstation for stream (deprecated)
        activate vra
        note right: if an active blueprint for a stream jumpstation is entitled to the business group, it used to be requested here
        ...wait for machine to be provisioned...    
    vro <- vra
    deactivate vra
    |||
    end
    |||

vro -> vro_user: environment created
deactivate vro


@enduml
